%{
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

// Define global variables
int choice;
char sentence[1000];  // This will store the user input sentence
char search_word[100];  // This will store the word to be searched
char new_word[100];     // This will store the new word to be added

void yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
}

int yylex();  // Lex function prototype

// Function to search for a word in the sentence
int searchWord(char* word) {
    return strstr(sentence, word) != NULL;  // Return true if the word is found
}

// Function to insert a new word at a specified position (front/back)
void insertWord(char* search_word, char* new_word, int position) {
    char result[2000];  // Buffer to hold the modified sentence
    char* pos = strstr(sentence, search_word);  // Find the position of the search_word

    if (pos != NULL) {
        // Found the word, now insert the new word
        if (position == 1) {  // Insert at the front
            // Copy everything before the search_word
            strncpy(result, sentence, pos - sentence);
            result[pos - sentence] = '\0';
            strcat(result, new_word);  // Add the new word
            strcat(result, search_word);  // Add the search_word itself
            strcat(result, pos + strlen(search_word));  // Add the rest of the sentence
        } else if (position == 2) {  // Insert at the back
            strncpy(result, sentence, pos + strlen(search_word) - sentence);  // Copy until after the search_word
            result[pos + strlen(search_word) - sentence] = '\0';
            strcat(result, new_word);  // Add the new word
            strcat(result, pos + strlen(search_word));  // Add the rest of the sentence
        }
        strcpy(sentence, result);  // Update the original sentence with the modified one
    } else {
        printf("Word not found in sentence.\n");
    }
}

// Function to delete a word from the sentence
void deleteWord(char* word) {
    char* pos = strstr(sentence, word);  // Find the position of the word

    if (pos != NULL) {
        char result[2000];  // Buffer to hold the modified sentence
        strncpy(result, sentence, pos - sentence);  // Copy everything before the word
        result[pos - sentence] = '\0';
        strcat(result, pos + strlen(word));  // Append the rest of the sentence after the word
        strcpy(sentence, result);  // Update the original sentence with the modified one
        printf("Updated sentence: %s\n", sentence);
    } else {
        printf("The word '%s' was not found in the sentence.\n", word);
    }
}

// Function to replace a word with a new word in the sentence
void switchWord(char* old_word, char* new_word) {
    char* pos = strstr(sentence, old_word);  // Find the position of the old word

    if (pos != NULL) {
        char result[2000];  // Buffer to hold the modified sentence
        int len_old = strlen(old_word);
        int len_new = strlen(new_word);

        // Copy everything before the old word
        strncpy(result, sentence, pos - sentence);
        result[pos - sentence] = '\0';

        // Append the new word instead of the old word
        strcat(result, new_word);

        // Append the remaining part of the sentence after the old word
        strcat(result, pos + len_old);

        strcpy(sentence, result);  // Update the original sentence with the modified one
        printf("Updated sentence: %s\n", sentence);
    } else {
        printf("The word '%s' was not found in the sentence.\n", old_word);
    }
}

%}

%token VIEW_SENTENCE EXIT_PROGRAM ADD_NEW_WORD FRONT BACK DELETE_WORD SWITCH_WORD

%%

program:
    | program statement
    ;

statement:
      VIEW_SENTENCE { 
          printf("\nStored sentence: %s\n", sentence);
      }
    | EXIT_PROGRAM {
          printf("\nExiting program...\n");
          exit(0);  // Exit the program
      }
    | ADD_NEW_WORD {
        printf("\nEnter the word to search for: ");
        fgets(search_word, sizeof(search_word), stdin);
        search_word[strcspn(search_word, "\n")] = '\0';  // Remove trailing newline

        // Check if the word is in the sentence
        if (searchWord(search_word)) {
            printf("Enter the new word to add: ");
            fgets(new_word, sizeof(new_word), stdin);
            new_word[strcspn(new_word, "\n")] = '\0';  // Remove trailing newline

            printf("Where would you like to add the new word?\n");
            printf("1. Front of the searched word\n");
            printf("2. Back of the searched word\n");

            int position;
            scanf("%d", &position);
            getchar();  // Consume the newline

            if (position == 1 || position == 2) {
                insertWord(search_word, new_word, position);  // Insert the new word
                printf("Updated sentence: %s\n", sentence);
            } else {
                printf("Invalid option.\n");
            }
        } else {
            printf("The word '%s' was not found in the sentence.\n", search_word);
        }
      }
    | DELETE_WORD {
        printf("\nEnter the word to search for to delete: ");
        fgets(search_word, sizeof(search_word), stdin);
        search_word[strcspn(search_word, "\n")] = '\0';  // Remove trailing newline

        deleteWord(search_word);  // Delete the word from the sentence
      }
    | SWITCH_WORD {
        printf("\nEnter the word to search for to switch: ");
        fgets(search_word, sizeof(search_word), stdin);
        search_word[strcspn(search_word, "\n")] = '\0';  // Remove trailing newline

        if (searchWord(search_word)) {
            printf("Enter the new word to replace '%s': ", search_word);
            fgets(new_word, sizeof(new_word), stdin);
            new_word[strcspn(new_word, "\n")] = '\0';  // Remove trailing newline

            switchWord(search_word, new_word);  // Switch the word
        } else {
            printf("The word '%s' was not found in the sentence.\n", search_word);
        }
      }
    ;

%%
